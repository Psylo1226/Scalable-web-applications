@model FaceSpace.Models.UserProfileViewModel
@using Microsoft.AspNetCore.Http
@inject Microsoft.AspNetCore.Http.IHttpContextAccessor HttpContextAccessor

@{
    var userId = HttpContextAccessor.HttpContext?.Request.Cookies["UserId"];
}

@section Styles {
    <style>
        .selected-avatar {
            border: 3px solid #007bff;
            border-radius: 50%; /* Ustawienie okrągłego obramowania */
        }
    </style>
}

<div class="container mt-4">
    <div class="d-flex align-items-center justify-content-between profile-header">
        <div class="d-flex align-items-center">
            <img src="@Model.SelectedAvatar" alt="Profile Avatar" class="rounded-circle border" style="width: 100px; height: 100px;" />
            <div class="ms-3">
                <h2>@Model.FirstName @Model.LastName</h2>
                <p class="text-muted">@Model.Description</p>
            </div>
        </div>
        <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#editProfileModal">Edit Profile</button>
    </div>

    <hr />

    <!-- Modal do edycji profilu -->
    <div class="modal fade" id="editProfileModal" tabindex="-1" aria-labelledby="editProfileModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="editProfileModalLabel">Edit Profile</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <form asp-action="UpdateProfile" method="post">
                    <div class="modal-body">
                        <!-- Wybór awatara -->
                        <div class="mb-3">
                            <label class="form-label">Choose an Avatar</label>
                            <div class="d-flex flex-wrap gap-2">
                                @foreach (var avatar in Model.AvatarOptions)
                                {
                                    <label class="avatar-option">
                                        <input type="radio" name="SelectedAvatar" value="@avatar" @(avatar == Model.SelectedAvatar ? "checked" : "") class="d-none" />
                                        <img src="@avatar" alt="Avatar" class="rounded-circle img-thumbnail" style="width: 70px; height: 70px; cursor: pointer;" />
                                    </label>
                                }
                            </div>
                        </div>

                        <!-- Edycja imienia i nazwiska -->
                        <div class="mb-3">
                            <label for="Name" class="form-label">First Name</label>
                            <input type="text" class="form-control" asp-for="FirstName" />
                        </div>
                        <div class="mb-3">
                            <label for="Name" class="form-label">Last Name</label>
                            <input type="text" class="form-control" asp-for="LastName" />
                        </div>

                        <!-- Edycja opisu -->
                        <div class="mb-3">
                            <label for="Description" class="form-label">Description</label>
                            <textarea class="form-control" asp-for="Description" rows="3"></textarea>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="submit" class="btn btn-primary">Save Changes</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- Create a New Post -->
<div class="card mb-5 shadow-sm">
    <div class="card-body">
        <h5 class="card-title text-center">Create a Post</h5>
        <form method="POST" id="addPost">
            <div class="form-group">
                <label for="title">Title</label>
                <input type="text" id="title" name="title" class="form-control" required />
            </div>
            <div class="mb-3">
                <textarea class="form-control" id="postContent" name="postContent" rows="3" placeholder="What's on your mind?"></textarea>
            </div>
            <div class="text-center">
                <button type="button" class="btn btn-primary" onclick="submitForm()">Post</button>
            </div>
        </form>
    </div>
</div>

<!-- User Posts -->
<div id="userPosts" class="mt-5">
    <h3 class="text-center mb-4">Your Posts</h3>
    <div id="postsContainer"></div>
</div>


@section Scripts {
    <script>
        document.querySelector('form').addEventListener('submit', async function (event) {
            event.preventDefault();

            const form = event.target;
            const formData = new FormData(form);
            const data = {};

            formData.forEach((value, key) => {
                data[key] = value;
            });

            const response = await fetch(form.action, {
                method: form.method,
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(data)
            });

            if (response.ok) {
                window.location.href = response.url;
            } else {
                console.error('Failed to update profile');
            }
        });
    </script>
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const avatarOptions = document.querySelectorAll('.avatar-option');

            avatarOptions.forEach(option => {
                const radioInput = option.querySelector('input[type="radio"]');
                const img = option.querySelector('img');

                option.addEventListener('click', function () {
                    // Odznaczenie innych obrazków
                    avatarOptions.forEach(o => o.classList.remove('selected-avatar'));

                    // Zaznaczenie wybranego obrazka
                    option.classList.add('selected-avatar');
                    radioInput.checked = true;
                });
                if (radioInput.checked) {
                    option.classList.add('selected-avatar');
                }
            });
        });
    </script>
<script>
    async function submitForm() {
        const form = document.getElementById('addPost');
        const formData = new FormData(form);

        var id = '@userId';

        const feedPost = {
            title: formData.get('title'),
            content: formData.get('postContent'),
            userId: id
        };

        const response = await fetch('https://localhost:5003/api/Post/addPost', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(feedPost)
        });

        if (response.ok) {
            form.reset();
            alert('Post created successfully!');
            loadUserPosts();
        } else {
            const errorText = await response.text();
            alert('Failed to create post: ' + errorText);
        }
    }

    async function loadUserPosts() {
        var id = '@userId';
        const response = await fetch(`https://localhost:5003/api/Post/user/${id}`);
        const posts = await response.json();

        const postsContainer = document.getElementById('postsContainer');
        postsContainer.innerHTML = '';

        posts.forEach(post => {
            const postElement = document.createElement('div');
            postElement.classList.add('card', 'mb-3');
            postElement.innerHTML = `
                <div class="card-body">
                    <h5 class="card-title">${post.title}</h5>
                    <p class="card-text">${post.content}</p>
                    <p class="card-text"><small class="text-muted">Posted on ${new Date(post.createdAt).toLocaleString()}</small></p>
                    <button class="btn btn-danger" onclick="deletePost(${post.id})">Delete</button>
                    <button class="btn btn-primary" onclick="toggleLike(${post.id})">Like (${post.likes})</button>
                </div>
            `;
            postsContainer.appendChild(postElement);
        });
    }

    async function deletePost(postId) {
        const response = await fetch(`https://localhost:5003/api/Post/delete/${postId}`, {
            method: 'DELETE'
        });

        if (response.ok) {
            alert('Post deleted successfully!');
            loadUserPosts();
        } else {
            const errorText = await response.text();
            alert('Failed to delete post: ' + errorText);
        }
    }

    async function toggleLike(postId) {
        var userId = '@userId';
        const response = await fetch(`https://localhost:5003/api/Post/like/${postId}?userId=${userId}`, {
            method: 'PUT'
        });

        if (response.ok) {
            loadUserPosts();
        } else {
            const errorText = await response.text();
            alert('Failed to like/unlike post: ' + errorText);
        }
    }

    document.addEventListener('DOMContentLoaded', function () {
        loadUserPosts();
    });
</script>
}